# -*- coding: utf-8 -*-
"""cdac_covid.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vuRWYvOvoQv_gqCWxNUXSLWVwFE9mgGU
"""

import os
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense, Flatten, Dropout
from keras.applications.resnet import ResNet50, ResNet101, ResNet152
from keras.applications.vgg16 import VGG16
from keras.applications.vgg19 import VGG19
from keras.applications.inception_v3 import InceptionV3
from keras.applications.inception_resnet_v2 import InceptionResNetV2, preprocess_input
from keras.metrics import Recall
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks.callbacks import EarlyStopping, ModelCheckpoint
import numpy as np
import cv2



from shutil import copyfile
copyfile('drive/My Drive/2_way_classification.zip', '2_way_classification.zip')

!unzip '2_way_classification.zip'

!rm -rf logs

!mkdir logs



image_shape = 299
num_classes = 2
batch_size = 64

InceptionResNetV2(include_top = False, weights = 'imagenet', input_shape = (image_shape,image_shape,3)).layers[-1].output_shape

def model_architecture():
  model = Sequential()
  resnet_layer = InceptionResNetV2(include_top = False, weights = 'imagenet', input_shape = (image_shape,image_shape,3))
  model.add(resnet_layer)
  model.add(Flatten())
  model.add(Dense(512, activation = 'relu'))
  model.add(Dense(128, activation = 'relu'))
  model.add(Dense(64, activation = 'relu'))
  model.add(Dense(num_classes, activation = 'softmax'))
  model.layers[0].trainable = False
  return model



model = model_architecture()
model.summary()



#data_gen = ImageDataGenerator()
data_gen = ImageDataGenerator(preprocessing_function=preprocess_input)
train_it = data_gen.flow_from_directory('2_way_classification/train', target_size = (image_shape,image_shape), batch_size = 64)
val_it = data_gen.flow_from_directory('2_way_classification/val', target_size = (image_shape,image_shape), batch_size = 20)
test_it = data_gen.flow_from_directory('2_way_classification/test', target_size = (image_shape,image_shape), batch_size = 80)



model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy', Recall()])



early_stopping = EarlyStopping(patience = 2, restore_best_weights = True)
filepath="logs/weights-improvement-{epoch:02d}-{val_loss:.2f}.hdf5"
checkpoint = ModelCheckpoint(filepath, period=2)



model.fit_generator(train_it, steps_per_epoch=6, epochs=20, callbacks=[checkpoint], validation_data=val_it, validation_steps=3)

#model.fit_generator(train_it, steps_per_epoch=8, epochs=10, callbacks=[checkpoint], validation_data=val_it, validation_steps=4)



model.evaluate_generator(test_it)



model_json = model.to_json()
with open("model.json", "w") as json_file:
    json_file.write(model_json)

model.save_weights('model.hdf5')

model.load_weights('final_weights/vgg16_87.5.hdf5')









